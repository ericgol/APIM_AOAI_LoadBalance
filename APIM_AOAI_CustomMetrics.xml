<policies>
    <inbound>
        <!-- Extract tokens and set context variables -->
        <set-variable name="client-id" value="@{
            string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");
            if (authHeader.StartsWith("Bearer "))
            {
                try 
                {
                    var token = authHeader.Substring(7);
                    var jwt = token.Split('.')[1];
                    // Pad base64 string if needed
                    while (jwt.Length % 4 != 0) { jwt += "="; }
                    var json = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(jwt));
                    
                    // Extract client_id using string parsing instead of JSON deserialization
                    if (json.Contains("\"client_id\"")) 
                    {
                        var start = json.IndexOf("\"client_id\":\"") + 13;
                        var end = json.IndexOf("\"", start);
                        if (start > 12 && end > start) { return json.Substring(start, end - start); }
                    }
                    if (json.Contains("\"appid\"")) 
                    {
                        var start = json.IndexOf("\"appid\":\"") + 9;
                        var end = json.IndexOf("\"", start);
                        if (start > 8 && end > start) { return json.Substring(start, end - start); }
                    }
                    if (json.Contains("\"azp\"")) 
                    {
                        var start = json.IndexOf("\"azp\":\"") + 7;
                        var end = json.IndexOf("\"", start);
                        if (start > 6 && end > start) { return json.Substring(start, end - start); }
                    }
                    return "unknown";
                }
                catch { return "parse-error"; }
            }
            return "no-token";
        }" />
        
        <set-variable name="tenant-id" value="@{
            string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");
            if (authHeader.StartsWith("Bearer "))
            {
                try 
                {
                    var token = authHeader.Substring(7);
                    var jwt = token.Split('.')[1];
                    while (jwt.Length % 4 != 0) { jwt += "="; }
                    var json = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(jwt));
                    
                    // Extract tenant_id using string parsing
                    if (json.Contains("\"tid\"")) 
                    {
                        var start = json.IndexOf("\"tid\":\"") + 7;
                        var end = json.IndexOf("\"", start);
                        if (start > 6 && end > start) { return json.Substring(start, end - start); }
                    }
                    if (json.Contains("\"tenant_id\"")) 
                    {
                        var start = json.IndexOf("\"tenant_id\":\"") + 13;
                        var end = json.IndexOf("\"", start);
                        if (start > 12 && end > start) { return json.Substring(start, end - start); }
                    }
                    return "unknown";
                }
                catch { return "parse-error"; }
            }
            return "no-token";
        }" />

        <set-variable name="user-principal" value="@{
            string authHeader = context.Request.Headers.GetValueOrDefault("Authorization", "");
            if (authHeader.StartsWith("Bearer "))
            {
                try 
                {
                    var token = authHeader.Substring(7);
                    var jwt = token.Split('.')[1];
                    while (jwt.Length % 4 != 0) { jwt += "="; }
                    var json = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(jwt));
                    
                    // Extract user principal using string parsing
                    if (json.Contains("\"upn\"")) 
                    {
                        var start = json.IndexOf("\"upn\":\"") + 7;
                        var end = json.IndexOf("\"", start);
                        if (start > 6 && end > start) { return json.Substring(start, end - start); }
                    }
                    if (json.Contains("\"unique_name\"")) 
                    {
                        var start = json.IndexOf("\"unique_name\":\"") + 15;
                        var end = json.IndexOf("\"", start);
                        if (start > 14 && end > start) { return json.Substring(start, end - start); }
                    }
                    if (json.Contains("\"preferred_username\"")) 
                    {
                        var start = json.IndexOf("\"preferred_username\":\"") + 22;
                        var end = json.IndexOf("\"", start);
                        if (start > 21 && end > start) { return json.Substring(start, end - start); }
                    }
                    return "unknown";
                }
                catch { return "parse-error"; }
            }
            return "no-token";
        }" />

        <!-- Set request start time for latency calculation -->
        <set-variable name="request-start-time" value="@(DateTime.UtcNow)" />
        
        <!-- Set cost tier based on subscription or product -->
        <set-variable name="cost-tier" value="@{
            string productId = context.Product?.Id ?? "default";
            string subscriptionId = context.Subscription?.Id ?? "unknown";
            
            // Define your cost tiers - customize these based on your products
            if (productId.Contains("premium")) { return "premium"; }
            if (productId.Contains("enterprise")) { return "enterprise"; }
            if (productId.Contains("basic")) { return "basic"; }
            return "standard";
        }" />
        
        <!-- CORS policy to allow all origins and headers -->
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods preflight-result-max-age="3600">
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>HEAD</method>
                <method>OPTIONS</method>
                <method>PATCH</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
    </inbound>
    
    <backend />
    
    <outbound>
        <!-- Log custom metrics to Application Insights -->
        <log-to-eventhub logger-id="your-eventhub-logger">@{
            var responseTime = DateTime.UtcNow.Subtract((DateTime)context.Variables["request-start-time"]).TotalMilliseconds;
            var costTier = context.Variables["cost-tier"].ToString();
            double costMultiplier = 1.0;
            
            if (costTier == "premium") { costMultiplier = 3.0; }
            else if (costTier == "enterprise") { costMultiplier = 5.0; }
            else if (costTier == "basic") { costMultiplier = 0.5; }
            
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString("o")),
                new JProperty("operation_name", context.Operation.Name),
                new JProperty("operation_id", context.Operation.Id),
                new JProperty("api_id", context.Api.Id),
                new JProperty("api_name", context.Api.Name),
                new JProperty("product_id", context.Product?.Id ?? "none"),
                new JProperty("subscription_id", context.Subscription?.Id ?? "none"),
                new JProperty("client_id", context.Variables["client-id"]),
                new JProperty("tenant_id", context.Variables["tenant-id"]),
                new JProperty("user_principal", context.Variables["user-principal"]),
                new JProperty("method", context.Request.Method),
                new JProperty("url", context.Request.Url.ToString()),
                new JProperty("response_code", context.Response.StatusCode),
                new JProperty("response_time_ms", responseTime),
                new JProperty("cost_tier", context.Variables["cost-tier"]),
                new JProperty("cost_multiplier", costMultiplier),
                new JProperty("estimated_cost", Math.Round(0.001 * costMultiplier, 6)),
                new JProperty("request_size", context.Request.Body?.Length ?? 0),
                new JProperty("response_size", context.Response.Body?.Length ?? 0),
                new JProperty("apim_instance", context.Deployment.ServiceName),
                new JProperty("region", context.Deployment.Region)
            ).ToString();
        }</log-to-eventhub>

        <!--  Alternative: Log to Application Insights directly -->
        <trace source="APIM-Showback">@{
            var responseTime = DateTime.UtcNow.Subtract((DateTime)context.Variables["request-start-time"]).TotalMilliseconds;
            return $"APIM_USAGE|{context.Variables["client-id"]}|{context.Variables["tenant-id"]}|{context.Api.Name}|{context.Operation.Name}|{responseTime}|{context.Response.StatusCode}|{context.Variables["cost-tier"]}";
        }</trace> 
    </outbound>
    
    <on-error>
        <!-- Log errors with same context -->
        <trace source="APIM-Showback-Error">@{
            var responseTime = context.Variables.ContainsKey("request-start-time") ? 
                DateTime.UtcNow.Subtract((DateTime)context.Variables["request-start-time"]).TotalMilliseconds : 0;
            var clientId = context.Variables.ContainsKey("client-id") ? context.Variables["client-id"] : "unknown";
            var tenantId = context.Variables.ContainsKey("tenant-id") ? context.Variables["tenant-id"] : "unknown";
            return $"APIM_ERROR|{clientId}|{tenantId}|{context.Api.Name}|{context.Operation.Name}|{responseTime}|{context.Response.StatusCode}|{context.LastError.Message}";
        }</trace>
    </on-error>
</policies>